extensionName = "palette"
markdownTemplate = """
# NetLogo Palette Extension

{{#include}}BUILDING.md{{/include}}

{{#include}}USING.md{{/include}}

## Primitives

{{#contents}}{{#prims}}
[`{{name}}`](#{{primitive.extensionName}}{{primitive.name}})
{{/prims}}{{/contents}}

{{#allPrimitives}}
{{{.}}}
{{/allPrimitives}}

{{#include}}REFERENCES.md{{/include}}

{{#include}}LICENSE.md{{/include}}
"""
primTemplate = """
### `{{name}}`

```NetLogo
{{#examples}}
{{primitive.fullName}}{{#args}} {{name}}{{/args}}
{{/examples}}
```

{{{description}}}
"""
filesToIncludeInManual = [ "USING.md", "primitives", "REFERENCES.md" ]
tableOfContents = { }
primitives = [
  {
    name: scale-gradient,
    type: Reporter,
    returns: list,
    arguments: [
      { name: rgb-color-list, type: list },
      { name: number, type: number },
      { name: range1, type: number },
      { name: range2, type: number }
    ],
    description: """
Reports an RGB color proportional to *number* using a gradient generated with *rgb-color-list*. An *rgb-color-list* consist of a list containing RGB list with three values between 0 and 255: [[r1 g1 b1] [r2 g2 b2] [r3 g3 b3] ...]

If *range1* is less than *range2*, the color will be directly mapped to gradient colors. While, if *range2* is less than *range1*, the color gradient is inverted.

If *number* is less than *range1*, then the first color of is *RGB-color-list* is chosen.

If *number* is grater than *range2*, then the last color of is *RGB-color-list* is chosen.

Example:

```
ask patches
[
  set pcolor palette:scale-gradient [[255 0 0] [0 0 255]] pxcor min-pxcor max-pxcor
]

;; colors each patch with a color proportional to the gradient
```
"""
  },
  {
    name: scale-scheme,
    type: reproter,
    returns: list,
    arguments: [
      { name: scheme-type, type: string },
      { name: scheme-color, type: number },
      { name: number-of-classes, type: number },
      { name: range1, type: number },
      { name: range2, type: number }
    ],
    description: """
Reports an RGB color proportional to *number* using the color brewer schemes. It takes six arguments the first three arguments define the ColorBrewer legend. Fir the user should select a scheme-type which can be "Sequential", "Divergent, Qualitative". Then it should select a variety of scheme-colors which depending on the scheme-color can have names such as "Reds", "Divergent", "Set1". Finally the user should select the number of classes with a minimum of 3 and a maximum between 9 and 11. For more information go to http://www.colorbrewer.org or consult the scheme-dialog primitive.

If *range1* is less than *range2*, the color will be directly mapped to scheme colors. While, if *range2* is less than *range1*, the color scheme selection is inverted.

If *number* is less than *range1*, then the first color of the resulting ColorBrewer legend is chosen.

If *number* is grater than *range2*, then the last color of the resulting ColorBrewer legend is chosen.

Example:

```
ask patches
[
  set pcolor palette:scale-scheme [[255 0 0] [0 0 255]] pxcor min-pxcor max-pxcor
]

;; colors each patch with a color from the Color Brewer Schemes
```
"""
  },
  {
    name: scheme-colors,
    type: reporter,
    returns: list,
    arguments: [
      { name: scheme-type, type: string },
      { name: scheme-color, type: string },
      { name: number-of-classes, type: number }
    ],
    description: """
report a list of RGB colors with the size specified in the a number of classes

Example:

```
show palette:scheme-colors "Divergent" "Spectral" 3
=> [[252 141 89] [255 255 191] [153 213 148]]


; The schemes-color primitive can be used with the scale-gradient primitive
ask patches
  [set pcolor palette:scale-gradient palette:scheme-colors "Divergent" "Spectral" 9 pxcor min-pxcor max-pxcor]
```
"""
  },
  {
    name: scale-gradient,
    type: reporter,
    returns: list,
    arguments: [
      { name: rgb-color-list, type: list },
      { name: number, type: number },
      { name: range1, type: number },
      { name: range2, type: number }
    ],
    description: """
Reports an RGB color proportional to number using a gradient generated with _rgb-color-list_. An _rgb-color-list_ consist of a list containing RGB list with three values between 0 and 255: [[r1 g1 b1] [r2 g2 b2] [r3 g3 b3] ...]

If *range1* is less than *range2*, the color will be directly mapped to gradient colors. While, if *range2* is less than *range1*, the color gradient is inverted.

If *number* is less than *range1*, then the first color of is *RGB-color-list* is chosen.

If *number* is grater than *range2*, then the last color of is *RGB-color-list* is chosen.

Example:

```
ask patches
[
  set pcolor palette:scale-gradient [[255 0 0] [0 0 255]] pxcor min-pxcor max-pxcor
]

;; colors each patch with a color proportional to the gradient
```
"""
  }
]
