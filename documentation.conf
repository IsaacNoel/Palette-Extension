extensionName = "palette"
markdownTemplate = """
# NetLogo Palette Extension

{{> BUILDING.md}}

{{> USING.md}}


## Primitives

{{#contents}}{{#prims}}
[`{{name}}`](#{{primitive.extensionName}}{{primitive.name}})
{{/prims}}{{/contents}}

{{#primitives}}
{{> primTemplate}}
{{/primitives}}

{{> REFERENCES.md}}

{{> LICENSE.md}}
"""
primTemplate = """
### `{{name}}`

```NetLogo
{{#examples}}
{{primitive.fullName}}{{#args}} {{name}}{{/args}}
{{/examples}}
```

{{{description}}}
"""
filesToIncludeInManual = [ "USING.md", "primitives", "REFERENCES.md" ]
tableOfContents = { }
primitives = [

  {
    name: alpha-of,
    type: reporter,
    returns: number,
    arguments: [
      {name: color, type: list || number}
    ],
    description: """
Reports a value in the range 0 to 255 representing the alpha of the given NL, RGB or RGBA color. The alpha value of an NL or RGB color is 255.

Example:
```
show palette:alpha-of red ;; 255
show palette:alpha-of [3 14 159 26] ;; 100
```
"""
  },
  {
    name: with-alpha,
    type: reporter,
    returns: list,
    infix: true,
    arguments: [
      {name: color, type:list || number}
      {name: number, type:number}
    ],
    description: """
Reports an RGBA color with alpha component equal to number and the other RGB components of the color unchange. An error message results if alpha is not in the range from 0 to 255.

Example:
```
show [12 34 55 6] palette:with-alpha 99 ;; [12 34 55 99]
```
"""
  },
  {
    name: alpha,
    type: reporter,
    returns: number,
    description: """
Get the alpha value of the color of the agent.The alpha value of an NL or RGB color is 255.

Example:
```
show [palette:alpha] of turtles
```
"""
  },
  {
    name: set-alpha,
    type: command,
    arguments: [
      {name: number, type: number}
    ],
    description: """
Set the color of the agent to the RGBA color with alpha value *number* and the RGB content of the color of the turtle or link (or patch in NetLogo3D). An error message results if number is not in the range 0 to 255.

Example:
```
ask turtles [palette:set-alpha 100]
```
"""
  },
  {
    name: transparency-of,
    type: reporter,
    returns: number,
    arguments: [
      {name:color, type:list || number}
    ],
    description: """
Reports a value in the range 0 to 100 representing the percent transparency of the given NL, RGB or RGBA color. The percent transparency of an NL or RGB color is 0.

Example:
```
show palette:extract-transparency [100 100 100 100] ;; 60.7843137254902
show palette:extract-transparency red ;; 0

```
"""
  },
  {
    name: with-transparency,
    type: reporter,
    returns: list,
    infix: true,
    arguments: [
      {name: color, type:list || number},
      {name: number, type: number}
    ],
    description: """

Reports an RGBA color with an alpha value equivalent to transparency ((100 - *number*) * 2.55) number and the RGB content of *color*. An error message results if number is not in the range 0 to 100.

Example:
```
show red palette:with-transparency 100 ;; [215 50 41 0]
```
"""
  },
  {
    name: transparency,
    type: reporter,
    returns: number,
    description: """

Reports the transparency equivalent of the agent's alpha.

Example:
```
show [palette:transparency] of turtles
```
"""
  },
  {
    name: set-transparency,
    type: command,
    arguments: [
      {name: number, type: number}
    ],
    description: """

Set the color of the agent to the RGBA color with alpha value number equivalent to the transparency ((100 - *number*) * 2.55) and the RGB content of the color of the turtle or link to number. An error message results if number is not in the range 0 to 100.

Example:
```
ask turtles [palette:set-transparency 30]
```
"""
  },
  {
    name: hue-of,
    type: reporter,
    returns: number,
    arguments: [
      {name:color, type:list || number}
    ],
    description: """
Reports a value in the range 0 to 360 representing the hue component in HSB color space of the given NL, RGB or RGBA color.

Example:
```
show palette:hue-of red ;; 3.103
```
"""
  },
  {
    name: with-hue,
    type: reporter,
    returns: list,
    infix: true,
    arguments: [
      {name: color, type:list || number},
      {name: number, type: number}
    ],
    description: """

Reports an RGBA color with hue component in HSB color space equal to number and the other HSB components of the input color unchanged. An error message results if number is not in the range 0 to 360.

Example:
```
show red palette:with-hue 100 ;; [99 215 41]
```
"""
  },
  {
    name: hue,
    type: reporter,
    returns: number,
    description: """
Reports a number in the range 0 to 360 that represents the hue of an agent’s color or pcolor

Example:
```
crt 1 [set color red]
[palette:hue] of turtle 0 ;; 3.103

```
"""
  },
  {
    name: set-hue,
    type: command,
    arguments: [
      {name: number, type: number}
    ],
    description: """

Changes an agent’s hue to the value of number. An error message results if number is not in the range from 0 to 360

Example:
```
ask turtles [palette:set-hue 30]
```
"""
  },
  {
    name: saturation-of,
    type: reporter,
    returns: number,
    arguments: [
      {name:color, type:list || number}
    ],
    description: """
Reports a value in the range 0 to 100 representing the saturation component in HSB color space of the given NL, RGB or RGBA color.

Example:
```
show palette:saturation-of red ;; 80.93
```
"""
  },
  {
    name: with-saturation,
    type: reporter,
    returns: list,
    infix: true,
    arguments: [
      {name: color, type:list || number},
      {name: number, type: number}
    ],
    description: """

Reports an RGBA color with saturation component in HSB color space equal to number and the other HSB components of the input color unchanged. An error message results if number is not in the range 0 to 100.

Example:
```
show red palette:with-saturation 50 ;; [215 113 108]
```
"""
  },
  {
    name: saturation,
    type: reporter,
    returns: number,
    description: """
Reports a number in the range 0 to 100 that represents the saturation of an agent’s color or pcolor

Example:
```
crt 1 [set color red]
[palette:saturation] of turtle 0 ;; 80.93

```
"""
  },
  {
    name: set-saturation,
    type: command,
    arguments: [
      {name: number, type: number}
    ],
    description: """

Changes an agent’s saturation to the value of number. An error message results if number is not in the range from 0 to 100

Example:
```
ask turtles [palette:set-saturation 30]
```
"""
  },
  {
    name: brightness-of,
    type: reporter,
    returns: number,
    arguments: [
      {name:color, type:list || number}
    ],
    description: """
Reports a value in the range 0 to 100 representing the brightness component in HSB color space of the given NL, RGB or RGBA color.

Example:
```
show palette:brightness-of red ;; 84.314
```
"""
  },
  {
    name: with-brightness,
    type: reporter,
    returns: list,
    infix: true,
    arguments: [
      {name: color, type:list || number},
      {name: number, type: number}
    ],
    description: """

Reports an RGBA color with brightness component in HSB color space equal to number and the other HSB components of the input color unchanged. An error message results if number is not in the range 0 to 100.

Example:
```
show red palette:with-brightness 50 ;; [128 30 24]
```
"""
  },
  {
    name: brightness,
    type: reporter,
    returns: number,
    description: """
Reports a number in the range 0 to 100 that represents the brightness of an agent’s color or pcolor

Example:
```
crt 1 [set color red]
[palette:brightness] of turtle 0 ;; 84.314

```
"""
  },
  {
    name: set-brightness,
    type: command,
    arguments: [
      {name: number, type: number}
    ],
    description: """

Changes an agent’s brightness to the value of number. An error message results if number is not in the range from 0 to 100

Example:
```
ask turtles [palette:set-brightness 30]
```
"""
  },
  {
    name: R-of,
    type: reporter,
    returns: number,
    arguments: [
      {name:color, type:list || number}
    ],
    description: """
Reports a value in the range 0 to 255 representing the red component in the RGB color space of the given NL, RGB or RGBA color.

Example:
```
show palette:R-of red ;; 215
```
"""
  },
  {
    name: with-R,
    type: reporter,
    returns: list,
    infix: true,
    arguments: [
      {name: color, type:list || number},
      {name: number, type: number}
    ],
    description: """

Reports an RGBA color with red component in RGB color space equal to number and the other RGB components of the input color unchanged. An error message results if number is not in the range 0 to 255.

Example:
```
show red palette:with-R 50 ;; [50 50 41]
```
"""
  },
  {
    name: R,
    type: reporter,
    returns: number,
    description: """
Reports a number in the range 0 to 255 that represents the red of an agent’s color or pcolor

Example:
```
crt 1 [set color red]
[palette:R] of turtle 0 ;; 215

```
"""
  },
  {
    name: set-R,
    type: command,
    arguments: [
      {name: number, type: number}
    ],
    description: """

Changes an agent’s red component of its RGB/A color to the value of number. An error message results if number is not in the range from 0 to 255

Example:
```
ask turtles [palette:set-R 30]
```
"""
  },
  {
    name: G-of,
    type: reporter,
    returns: number,
    arguments: [
      {name:color, type:list || number}
    ],
    description: """
Reports a value in the range 0 to 255 representing the green component in the RGB color space of the given NL, RGB or RGBA color.

Example:
```
show palette:G-of red ;; 50
```
"""
  },
  {
    name: with-G,
    type: reporter,
    returns: list,
    infix: true,
    arguments: [
      {name: color, type:list || number},
      {name: number, type: number}
    ],
    description: """

Reports an RGBA color with green component in RGB color space equal to number and the other RGB components of the input color unchanged. An error message results if number is not in the range 0 to 255.

Example:
```
show red palette:with-G 56 ;; [215 56 41]
```
"""
  },
  {
    name: G,
    type: reporter,
    returns: number,
    description: """
Reports a number in the range 0 to 255 that represents the green of an agent’s color or pcolor

Example:
```
crt 1 [set color red]
[palette:G] of turtle 0 ;; 50

```
"""
  },
  {
    name: set-G,
    type: command,
    arguments: [
      {name: number, type: number}
    ],
    description: """

Changes an agent’s green component of its RGB/A color to the value of number. An error message results if number is not in the range from 0 to 255

Example:
```
ask turtles [palette:set-G 30]
```
"""
  },
  {
    name: B-of,
    type: reporter,
    returns: number,
    arguments: [
      {name:color, type:list || number}
    ],
    description: """
Reports a value in the range 0 to 255 representing the blue component in the RGB color space of the given NL, RGB or RGBA color.

Example:
```
show palette:B-of red ;; 41
```
"""
  },
  {
    name: with-B,
    type: reporter,
    returns: list,
    infix: true,
    arguments: [
      {name: color, type:list || number},
      {name: number, type: number}
    ],
    description: """

Reports an RGBA color with blue component in RGB color space equal to number and the other RGB components of the input color unchanged. An error message results if number is not in the range 0 to 255.

Example:
```
show red palette:with-B 56 ;; [215 50 56]
```
"""
  },
  {
    name: B,
    type: reporter,
    returns: number,
    description: """
Reports a number in the range 0 to 255 that represents the blue of an agent’s color or pcolor

Example:
```
crt 1 [set color red]
[palette:B] of turtle 0 ;; 41

```
"""
  },
  {
    name: set-B,
    type: command,
    arguments: [
      {name: number, type: number}
    ],
    description: """

Changes an agent’s blue component of its RGB/A color to the value of number. An error message results if number is not in the range from 0 to 255

Example:
```
ask turtles [palette:set-B 30]
```
"""
  },
  {
    name: scale-gradient,
    type: Reporter,
    returns: list,
    arguments: [
      { name: rgb-color-list, type: list },
      { name: number, type: number },
      { name: range1, type: number },
      { name: range2, type: number }
    ],
    description: """
Reports an RGB color proportional to *number* using a gradient generated with *rgb-color-list*. An *rgb-color-list* consist of a list containing RGB list with three values between 0 and 255: [[r1 g1 b1] [r2 g2 b2] [r3 g3 b3] ...]

If *range1* is less than *range2*, the color will be directly mapped to gradient colors. While, if *range2* is less than *range1*, the color gradient is inverted.

If *number* is less than *range1*, then the first color of is *RGB-color-list* is chosen.

If *number* is greater than *range2*, then the last color of is *RGB-color-list* is chosen.

Example:

```
ask patches
[
  set pcolor palette:scale-gradient [[255 0 0] [0 0 255]] pxcor min-pxcor max-pxcor
]

;; colors each patch with a color proportional to the gradient
```
"""
  },
  {
    name: scale-scheme,
    type: reproter,
    returns: list,
    arguments: [
      { name: scheme-type, type: string },
      { name: scheme-color, type: number },
      { name: number-of-classes, type: number },
      { name: range1, type: number },
      { name: range2, type: number }
    ],
    description: """
Reports an RGB color proportional to *number* using the color brewer schemes. It takes six arguments the first three arguments define the ColorBrewer legend. Fir the user should select a scheme-type which can be "Sequential", "Divergent, Qualitative". Then it should select a variety of scheme-colors which depending on the scheme-color can have names such as "Reds", "Divergent", "Set1". Finally the user should select the number of classes with a minimum of 3 and a maximum between 9 and 11. For more information go to http://www.colorbrewer.org or consult the scheme-dialog primitive.

If *range1* is less than *range2*, the color will be directly mapped to scheme colors. While, if *range2* is less than *range1*, the color scheme selection is inverted.

If *number* is less than *range1*, then the first color of the resulting ColorBrewer legend is chosen.

If *number* is grater than *range2*, then the last color of the resulting ColorBrewer legend is chosen.

Example:

```
ask patches
[
  set pcolor palette:scale-scheme "Divergent" "Spectral" 8 pxcor min-pxcor max-pxcor
]

;; colors each patch with a color from the Color Brewer Schemes
```
"""
  },
  {
    name: scheme-colors,
    type: reporter,
    returns: list,
    arguments: [
      { name: scheme-type, type: string },
      { name: scheme-color, type: string },
      { name: number-of-classes, type: number }
    ],
    description: """
report a list of RGB colors with the size specified in the a number of classes

Example:

```
show palette:scheme-colors "Divergent" "Spectral" 3
=> [[252 141 89] [255 255 191] [153 213 148]]


; The schemes-color primitive can be used with the scale-gradient primitive
ask patches
  [set pcolor palette:scale-gradient palette:scheme-colors "Divergent" "Spectral" 9 pxcor min-pxcor max-pxcor]
```
"""
  },
  {
    name: scale-gradient,
    type: reporter,
    returns: list,
    arguments: [
      { name: rgb-color-list, type: list },
      { name: number, type: number },
      { name: range1, type: number },
      { name: range2, type: number }
    ],
    description: """
Reports an RGB color proportional to number using a gradient generated with _rgb-color-list_. An _rgb-color-list_ consist of a list containing RGB list with three values between 0 and 255: [[r1 g1 b1] [r2 g2 b2] [r3 g3 b3] ...]

If *range1* is less than *range2*, the color will be directly mapped to gradient colors. While, if *range2* is less than *range1*, the color gradient is inverted.

If *number* is less than *range1*, then the first color of is *RGB-color-list* is chosen.

If *number* is grater than *range2*, then the last color of is *RGB-color-list* is chosen.

Example:

```
ask patches
[
  set pcolor palette:scale-gradient [[255 0 0] [0 0 255]] pxcor min-pxcor max-pxcor
]

;; colors each patch with a color proportional to the gradient
```
"""
  },
  {
  name: scale-gradient-hsb,
  type: reporter,
  returns: list,
  arguments: [
    { name: rgb-color-list, type: list },
    { name: number, type: number },
    { name: range1, type: number },
    { name: range2, type: number }
  ],
  description: """
  Reports an RGB color equivalent to a color in HSB space proportional to number using a gradient generated with _hsb-list_. An _hsb-list_ consists of a list containing three-element lists of HSB colors: [[h1 s1 b1] [h2 s2 b2] [h3 s3 b3]  …]
  If *range1* is less than *range2*, the HSB color will be directly mapped to gradient HSB colors. While, if range2 is less than range1, the color gradient is inverted.
  If *number* is less than *range1*, then the first HSB color of the *hsb-list* is converted to an RGB color.
  If *number* is greater than *range2*, then the last HSB color of the *hsb-list* is converted to an RGB color.


Example:

```
ask patches
[
ask patches [set pcolor palette:scale-gradient-hsb [[200 50 50] [100 60 70]] pxcor min-pxcor max-pxcor]
]

;; colors each patch with a color proportional to the gradient
```
"""
  }
]
